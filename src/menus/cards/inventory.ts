import { CardInterface } from "#database";
import { icon } from "#functions";
import { settings } from "#settings";
import { brBuilder, createEmbed, createRow } from "@magicyan/discord";
import { ButtonBuilder, ButtonStyle } from "discord.js";

interface ViewInventoryOptions {
    currentPage: number;
    totalCards: number;
    cards: CardInterface[];
    userId: string;
    username: string;
}

export function createInventoryView({ 
    currentPage, 
    totalCards, 
    cards, 
    userId, 
    username 
}: ViewInventoryOptions) {
    const totalPages = Math.max(1, totalCards);
    currentPage = Math.min(Math.max(1, currentPage), totalPages);
    
    const currentCard = cards[currentPage - 1];
    const hasCards = totalCards > 0;

    const embed = createEmbed({
        color: settings.colors.default,
        title: `üé¥ Invent√°rio ${userId === "self" ? "" : `de ${username}`}`,
        image: hasCards ? { url: currentCard.image } : undefined,
        description: hasCards ? brBuilder(
            `## ${currentCard.name} ‚Ä¢ ${currentCard.rarity}`,
            `üìñ **Descri√ß√£o:** ${currentCard.description}`,
            "",
            "üìã **Informa√ß√µes B√°sicas**",
            `üè∑Ô∏è **Vila:** ${currentCard.village}`,
            `üìú **Rank:** ${currentCard.rank}`,
            `‚öîÔ∏è **Cl√£:** ${currentCard.clan}`,
            `${icon.Ryo} **Pre√ßo:** ${currentCard.price} coins`,
            "",
            "üìä **Atributos Principais**",
            `üí™ For√ßa: ${"‚ñ∞".repeat(Math.floor(currentCard.strength/10))}${"‚ñ±".repeat(10 - Math.floor(currentCard.strength/10))} ${currentCard.strength}/100`,
            `‚ö° Velocidade: ${"‚ñ∞".repeat(Math.floor(currentCard.speed/10))}${"‚ñ±".repeat(10 - Math.floor(currentCard.speed/10))} ${currentCard.speed}/100`,
            `üß† Intelig√™ncia: ${"‚ñ∞".repeat(Math.floor(currentCard.intelligence/10))}${"‚ñ±".repeat(10 - Math.floor(currentCard.intelligence/10))} ${currentCard.intelligence}/100`,
            "",
            "üåÄ **Atributos de Chakra**",
            `üå™Ô∏è Controle: ${currentCard.chakraControl}/100`,
            `üîÆ Ninjutsu: ${currentCard.ninjutsu}/100`,
            `üëÅÔ∏è Genjutsu: ${currentCard.genjutsu}/100`,
            `üëä Taijutsu: ${currentCard.taijutsu}/100`,
            "",
            currentCard.chakraType.length > 0 
                ? `üåà **Tipos de Chakra:**\n${currentCard.chakraType.map(t => `‚Ä¢ ${t}`).join("\n")}` 
                : "",
            currentCard.specialAbilities.length > 0 
                ? `‚ú® **Habilidades Especiais:**\n${currentCard.specialAbilities.map(a => `‚Ä¢ ${a}`).join("\n")}` 
                : ""
        ) : `‚ùå ${userId === "self" ? "Voc√™ n√£o possui" : `${username} n√£o possui`} cards no invent√°rio!`,
        footer: hasCards ? { 
            text: `üìå P√°gina ${currentPage} de ${totalPages} ‚Ä¢ üóÉÔ∏è Total de cards: ${totalCards}`,
            iconURL: "https://cdn3.emoji.gg/emojis/5284-blurple-book.png"
        } : undefined
    });

    const row = createRow(
        new ButtonBuilder({
            label: "‚èÆÔ∏è",
            customId: `inventory/first/${currentPage}/${totalPages}/${userId}`,
            style: ButtonStyle.Secondary,
            disabled: currentPage === 1 || !hasCards,
        }),
        new ButtonBuilder({
            label: "‚óÄÔ∏è",
            customId: `inventory/previous/${currentPage}/${totalPages}/${userId}`,
            style: ButtonStyle.Primary,
            disabled: currentPage === 1 || !hasCards,
        }),
        new ButtonBuilder({
            label: `${currentPage}/${totalPages}`,
            customId: "noop",
            style: ButtonStyle.Secondary,
            disabled: true,
        }),
        new ButtonBuilder({
            label: "‚ñ∂Ô∏è",
            customId: `inventory/next/${currentPage}/${totalPages}/${userId}`,
            style: ButtonStyle.Primary,
            disabled: currentPage === totalPages || !hasCards,
        }),
        new ButtonBuilder({
            label: "‚è≠Ô∏è",
            customId: `inventory/last/${currentPage}/${totalPages}/${userId}`,
            style: ButtonStyle.Secondary,
            disabled: currentPage === totalPages || !hasCards,
        })
    );

    return { 
        embeds: [embed], 
        components: hasCards ? [row] : [] 
    };
}