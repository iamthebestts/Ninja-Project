import { CardInterface } from "#database";
import { icon } from "#functions";
import { settings } from "#settings";
import { brBuilder, createEmbed, createRow } from "@magicyan/discord";
import { ButtonBuilder, ButtonStyle } from "discord.js";

interface CardsViewOptions {
  currentPage: number;
  totalCards: number;
  cards: CardInterface[];
  userId: string; // ID do usu√°rio que executou o comando
}

export function createCardsView({
  currentPage,
  totalCards,
  cards,
  userId, // Recebe o ID do usu√°rio
}: CardsViewOptions) {
  // Valida√ß√µes iniciais
  if (currentPage < 1 || !Number.isInteger(currentPage)) {
    throw new Error("P√°gina inv√°lida! Deve ser um n√∫mero inteiro maior que 0.");
  }
  if (totalCards < 0 || !Number.isInteger(totalCards)) {
    throw new Error("N√∫mero total de cards inv√°lido!");
  }
  if (!Array.isArray(cards)) {
    throw new Error("Lista de cards deve ser um array!");
  }

  const totalPages = Math.max(1, totalCards);
  currentPage = Math.min(Math.max(1, currentPage), totalPages);

  const currentCard = cards[currentPage - 1];
  const hasCards = totalCards > 0;

  const embed = createEmbed({
    color: settings.colors.primary,
    title: `${hasCards ? "" : "üì≠ Nenhum card"}`,
    image: hasCards ? { url: currentCard.image } : undefined,
    description: hasCards
      ? brBuilder(
          `## üóÇÔ∏è ${currentCard.name} ‚Ä¢ ${currentCard.rarity}`,
          `üìñ **Descri√ß√£o:** ${currentCard.description}`,
          "",
          "üìã **Informa√ß√µes B√°sicas**",
          `üè∑Ô∏è **Vila:** ${currentCard.village}`,
          `üìú **Rank:** ${currentCard.rank}`,
          `‚öîÔ∏è **Cl√£:** ${currentCard.clan}`,
          `${icon.Ryo} **Pre√ßo:** ${currentCard.price} coins`,
          "",
          "üìä **Atributos Principais**",
          `üí™ For√ßa: ${"‚ñ∞".repeat(
            Math.floor(currentCard.strength / 10)
          )}${"‚ñ±".repeat(10 - Math.floor(currentCard.strength / 10))} ${
            currentCard.strength
          }/100`,
          `‚ö° Velocidade: ${"‚ñ∞".repeat(
            Math.floor(currentCard.speed / 10)
          )}${"‚ñ±".repeat(10 - Math.floor(currentCard.speed / 10))} ${
            currentCard.speed
          }/100`,
          `üß† Intelig√™ncia: ${"‚ñ∞".repeat(
            Math.floor(currentCard.intelligence / 10)
          )}${"‚ñ±".repeat(10 - Math.floor(currentCard.intelligence / 10))} ${
            currentCard.intelligence
          }/100`,
          "",
          "üåÄ **Atributos de Chakra**",
          `üå™Ô∏è Controle: ${currentCard.chakraControl}/100`,
          `üîÆ Ninjutsu: ${currentCard.ninjutsu}/100`,
          `üëÅÔ∏è Genjutsu: ${currentCard.genjutsu}/100`,
          `üëä Taijutsu: ${currentCard.taijutsu}/100`,
          "",
          currentCard.chakraType.length > 0
            ? `üåà **Tipos de Chakra:**\n${currentCard.chakraType
                .map((t) => `‚Ä¢ ${t}`)
                .join("\n")}`
            : "",
          currentCard.specialAbilities.length > 0
            ? `‚ú® **Habilidades Especiais:**\n${currentCard.specialAbilities
                .map((a) => `‚Ä¢ ${a}`)
                .join("\n")}`
            : ""
        )
      : "‚ùå Nenhum card encontrado na cole√ß√£o!\nUse `/cards add` para criar novos cards.",
    footer: hasCards
      ? {
          text: `üìå P√°gina ${currentPage} de ${totalPages} ‚Ä¢ üóÉÔ∏è Total na cole√ß√£o: ${totalCards}`,
          iconURL: "https://cdn3.emoji.gg/emojis/5284-blurple-book.png",
        }
      : undefined,
  });

  const row = createRow(
    new ButtonBuilder({
      label: "‚èÆÔ∏è",
      customId: `cards/first/${currentPage}/${totalCards}/${userId}`, // Passa o userId
      style: ButtonStyle.Secondary,
      disabled: currentPage === 1 || !hasCards,
    }),
    new ButtonBuilder({
      label: "‚óÄÔ∏è",
      customId: `cards/previous/${currentPage}/${totalCards}/${userId}`, // Passa o userId
      style: ButtonStyle.Primary,
      disabled: currentPage === 1 || !hasCards,
    }),
    new ButtonBuilder({
        label: `${currentPage}/${totalPages}`,
        customId: "noop",
        style: ButtonStyle.Secondary,
    }),
    new ButtonBuilder({
      label: "‚ñ∂Ô∏è",
      customId: `cards/next/${currentPage}/${totalCards}/${userId}`, // Passa o userId
      style: ButtonStyle.Primary,
      disabled: currentPage === totalPages || !hasCards,
    }),
    new ButtonBuilder({
      customId: `cards/last/${currentPage}/${totalCards}/${userId}`, // Passa o userId
      label: "‚è≠Ô∏è",
      style: ButtonStyle.Secondary,
      disabled: currentPage === totalPages || !hasCards,
    })
  );

  return {
    embeds: [embed],
    components: hasCards ? [row] : [],
  };
}